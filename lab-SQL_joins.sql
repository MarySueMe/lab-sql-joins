USE sakila;
SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:

-- List the number of films per category.

SELECT c.category_id, c.name, COUNT(fc.film_id) AS num_films
FROM sakila.category c
JOIN sakila.film_category fc
ON c.category_id = fc.category_id 
GROUP BY c.name;


-- Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city, co.country
FROM sakila.country co
JOIN sakila.city ci
ON co.country_id = ci.country_id
JOIN sakila.address ad
ON ci.city_id = ad.city_id
JOIN sakila.store s
ON ad.address_id = s.address_id
ORDER BY s.store_id;


-- Calculate the total revenue generated by each store in dollars.
SELECT c.store_id, SUM(p.amount) AS revenue
FROM sakila.customer c
JOIN sakila.payment p
ON c.store_id = p.store_id
ORDER BY c.store_id;

-- Alternative from Jaineel: 
SELECT st.store_id as store_id, SUM(p.amount) as revenue
FROM sakila.payment p 
JOIN sakila.staff s
ON p.staff_id = s.staff_id
JOIN sakila.store st
ON s.store_id = st.store_id
GROUP BY store_id;

-- Determine the average running time of films for each category.

SELECT c.name, AVG(f.length) AS "Avg Running Time"
FROM sakila.category c
JOIN sakila.film_category fc
USING (category_id)
JOIN sakila.film f
USING (film_id)
GROUP by c.name;

-- Identify the film categories with the longest average running time.

SELECT c.name, AVG(f.length) AS "Avg Running Time"
FROM sakila.category c
JOIN sakila.film_category fc
USING (category_id)
JOIN sakila.film f
USING (film_id)
GROUP by c.name
ORDER BY f.length DESC;



-- Display the top 10 most frequently rented movies in descending order.

SELECT f.title, i.film_id, COUNT(r.rental_id) AS "Rental Count"
FROM sakila.rental f
JOIN sakila.inventory i
USING (inventory_id)
JOIN sakila.film f
USING (film_id)
GROUP BY i.film_id, f.title
ORDER BY "Rental Count" DESC
LIMIT 10;


-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id, COUNT(i.inventory_id) AS "Inventory Count)"
FROM sakila.film f
JOIN sakila.inventory i
USING (film_id)
JOIN sakila.store s
WHERE f.title = "Academy Dinosaur" AND s.store_id = 1;
-- YES there are 8 copies from store 1

-- 8.  List of ALL film titles and if they are available in inventory.
SELECT f.title, 
       CASE WHEN i.inventory_id IS NULL THEN 'Not Available' ELSE 'Available' 
			END AS "Availability"
FROM sakila.film f
LEFT JOIN sakila.inventory i
ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title;










